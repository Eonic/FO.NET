[
  {
    "Id": "508834",
    "ThreadId": "231336",
    "Html": "<p>I'm currently trying to include base64 encoded images in a pdf and cannot seem to get fo.net to accept the syntax. I've used Apache fop successfully from the command line but FO.NET doesn't seem to want to play. Anyone got any ideas?</p>\r\n<p>&lt;fo:external-graphic content-width=&quot;46px&quot; content-height=&quot;20px&quot; src=&quot;data:image/jpeg;base64,'base64 string goes here'&quot;/&gt;</p>\r\n<p>Thanks,</p>\r\n<p>Ian</p>",
    "PostedDate": "2010-10-18T08:03:13.37-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "531110",
    "ThreadId": "231336",
    "Html": "\r\n<p>Hi Ian</p>\r\n<p>That feature was not present in FOP at the time FO.NET was ported so I am afraid it is unimplemented.</p>\r\n<p>You might want to take a look at FonetDriver.ImageHander.&nbsp; This is a delegate that you can use to provide your own custom method of resolving images urls to byte arrays:</p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre>        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;summary&gt;</span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">     The delegate subscribers must implement to handle the loading </span>\r\n        <span style=\"color:gray\">///</span><span style=\"color:green\">     of image data in response to external-graphic formatting objects.</span>\r\n        <span style=\"color:gray\">///</span> <span style=\"color:gray\">&lt;/summary&gt;</span>\r\n        <span style=\"color:blue\">public</span> <span style=\"color:blue\">delegate</span> <span style=\"color:blue\">byte</span>[] FonetImageHandler(<span style=\"color:blue\">string</span> src);\r\n</pre>\r\n</div>\r\n<p>You could write an implementation that extracts and returns the base64 encoded data.</p>\r\n<p>Mark</p>\r\n",
    "PostedDate": "2010-12-04T06:26:52.603-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "547293",
    "ThreadId": "231336",
    "Html": "\r\n<p>Hellow is possible make an example or sample of the delegate use</p>\r\n",
    "PostedDate": "2011-01-11T06:50:30.257-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "643816",
    "ThreadId": "231336",
    "Html": "<p>Great hint and with a great API everything is possible :-)</p>\r\n<p>Here is an example of how we handled &nbsp;adding barcode images using FonetImageHandler:</p>\r\n<p>usage (inside src is EAN13 barcode value):</p>\r\n<pre style=\"font-family: Consolas; font-size: 13; color: black; background: white;\"><span style=\"color: blue;\">&lt;</span><span style=\"color: #a31515;\">fo:block</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\"> &nbsp;&lt;</span><span style=\"color: #a31515;\">fo:external-graphic</span><span style=\"color: blue;\">&nbsp;</span><span style=\"color: red;\">src</span><span style=\"color: blue;\">=</span>\"<span style=\"color: blue;\">9771473968012</span>\"<span style=\"color: blue;\">&gt;&lt;/</span><span style=\"color: #a31515;\">fo:external-graphic</span><span style=\"color: blue;\">&gt;</span>\r\n<span style=\"color: blue;\">&lt;/</span><span style=\"color: #a31515;\">fo:block</span><span style=\"color: blue;\">&gt;</span></pre>\r\n<p>&nbsp;In code:</p>\r\n<pre style=\"font-family: Consolas; font-size: 13; color: black; background: white;\">&nbsp;<span style=\"color: blue;\">       private</span>&nbsp;<span style=\"color: blue;\">static</span>&nbsp;<span style=\"color: blue;\">byte</span>[]&nbsp;ImageHandler(<span style=\"color: blue;\">string</span>&nbsp;input)&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">long</span>&nbsp;result;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">if</span>&nbsp;(<span style=\"color: blue;\">string</span>.IsNullOrEmpty(input)&nbsp;||&nbsp;input.Length&nbsp;!=&nbsp;13&nbsp;||&nbsp;!<span style=\"color: blue;\">long</span>.TryParse(input,&nbsp;<span style=\"color: blue;\">out</span>&nbsp;result))\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">return</span>&nbsp;<span style=\"color: blue;\">null</span>;&nbsp;<span style=\"color: green;\">//fo&nbsp;performs&nbsp;normal&nbsp;processing</span>\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: blue;\">return</span>&nbsp;<span style=\"color: #2b91af;\">BarcodeImager</span>.CreateBarcodeImage(input,&nbsp;36);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre>\r\n<p>&nbsp;and to make use of the ImageHandler:</p>\r\n<pre style=\"font-family: Consolas; font-size: 13; color: black; background: white;\"><span style=\"color: #2b91af;\">       MemoryStream</span>&nbsp;foTemplate&nbsp;=&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">MemoryStream</span>(<span style=\"color: #2b91af;\">File</span>.ReadAllBytes(<span style=\"color: #a31515;\">\"fotemplate.fo\"</span>));\r\n&nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #2b91af;\">MemoryStream</span>&nbsp;output&nbsp;=&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">MemoryStream</span>();\r\n&nbsp; &nbsp; &nbsp; &nbsp;<span style=\"color: #2b91af;\">FonetDriver</span>&nbsp;driver&nbsp;=&nbsp;<span style=\"color: #2b91af;\">FonetDriver</span>.Make();\r\n&nbsp; &nbsp; &nbsp; &nbsp;driver.ImageHandler = <span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">FonetDriver</span>.<span style=\"color: #2b91af;\">FonetImageHandler</span>(ImageHandler);<span style=\"color: green;\">//to&nbsp;create&nbsp;barcode&nbsp;images</span>\r\n&nbsp; &nbsp; &nbsp; &nbsp;driver.Render(foTemplate, output);</pre>\r\n<p>Of course, one may argue that instead of just numbers, some formatting hint would've been better, but we're happy just the way it is :)</p>\r\n<p>Btw... in case someone needs it, the BarcodeImager is using the iTextSharp dll like this:</p>\r\n<pre style=\"font-family: Consolas; font-size: 13; color: black; background: white;\"><span style=\"color: blue;\">public</span>&nbsp;<span style=\"color: blue;\">static</span>&nbsp;<span style=\"color: blue;\">byte</span>[]&nbsp;CreateBarcodeImage(<span style=\"color: blue;\">string</span>&nbsp;barcode,&nbsp;<span style=\"color: blue;\">int</span>&nbsp;barHeight)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #2b91af;\">BarcodeEAN</span>&nbsp;barCodeEan&nbsp;=&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">BarcodeEAN</span>();\r\n \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;barCodeEan.CodeType&nbsp;=&nbsp;iTextSharp.text.pdf.<span style=\"color: #2b91af;\">Barcode</span>.EAN13;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; barCodeEan.Code = barcode;\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; barCodeEan.BarHeight = barHeight;\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: blue;\">var</span>&nbsp;image&nbsp;=&nbsp;barCodeEan.CreateDrawingImage(<span style=\"color: #2b91af;\">Color</span>.Black,&nbsp;<span style=\"color: #2b91af;\">Color</span>.White);\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #2b91af;\">MemoryStream</span>&nbsp;ms&nbsp;=&nbsp;<span style=\"color: blue;\">new</span>&nbsp;<span style=\"color: #2b91af;\">MemoryStream</span>();\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; image.Save(ms, <span style=\"color: #2b91af;\">ImageFormat</span>.Gif);\r\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: blue;\">return</span> ms.GetBuffer();\r\n\r\n&nbsp; &nbsp; &nbsp; &nbsp; }<br /><br /><br />Thanks again for this greatgreat fonet!!<br /></pre>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-07-18T10:19:25.027-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]