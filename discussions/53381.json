[
  {
    "Id": "179658",
    "ThreadId": "53381",
    "Html": "I use the last Moma (Mono Analyzer) for Mono 2.4 for testing FO.NET.<br>\r\n<br>\r\nThe report says that there are 17 P/Invoke function not supported by Mono<br>\r\n<br>\r\n<table cellspacing=0 cellpadding=2 width=\"100%\">\r\n    <tbody>\r\n        <tr>\r\n            <td>void Dispose (bool)</td>\r\n            <td>IntPtr LibWrapper.DeleteObject (IntPtr)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>GdiFont CreateFont (string, int, bool, bool)</td>\r\n            <td>IntPtr LibWrapper.CreateFontIndirect (LogFont)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void AddFontFile (FileInfo)</td>\r\n            <td>int LibWrapper.AddFontResourceEx (string, uint, int)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Byte[] GetFontData ()</td>\r\n            <td>uint LibWrapper.GetFontData (IntPtr, uint, uint, Byte[], uint)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Byte[] ReadFont ()</td>\r\n            <td>uint LibWrapper.GetFontData (IntPtr, uint, uint, Byte[], uint)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Byte[] ReadFont ()</td>\r\n            <td>uint LibWrapper.GetFontData (IntPtr, uint, uint, Byte[], uint)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void .ctor (GdiDeviceContent, GdiFont)</td>\r\n            <td>int LibWrapper.GetTextFace (IntPtr, int, StringBuilder)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void LoadGlyphIndices ()</td>\r\n            <td>uint LibWrapper.GetGlyphIndices (IntPtr, string, int, UInt16[], uint)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>String[] get_FamilyNames ()</td>\r\n            <td>int LibWrapper.EnumFontFamiliesEx (IntPtr, LogFont, FontEnumDelegate, int, int)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>FontStyles GetStyles (string)</td>\r\n            <td>int LibWrapper.EnumFontFamilies (IntPtr, string, FontEnumDelegate, int)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void LoadRanges (GdiDeviceContent)</td>\r\n            <td>uint LibWrapper.GetFontUnicodeRanges (IntPtr, GlyphSet)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void Dispose (bool)</td>\r\n            <td>bool LibWrapper.DeleteDC (IntPtr)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>IntPtr SelectFont (GdiFont)</td>\r\n            <td>IntPtr LibWrapper.SelectObject (IntPtr, IntPtr)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>IntPtr GetCurrentObject (GdiDcObject)</td>\r\n            <td>IntPtr LibWrapper.GetCurrentObject (IntPtr, GdiDcObject)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>void .ctor ()</td>\r\n            <td>IntPtr LibWrapper.GetDC (IntPtr)</td>\r\n            <td>User32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Byte[] ReadTableData (string)</td>\r\n            <td>uint LibWrapper.GetFontData (IntPtr, uint, uint, Byte[], uint)</td>\r\n            <td>gdi32.dll</td>\r\n        </tr>\r\n        <tr>\r\n            <td>Byte[] ReadTableData (string)</td>\r\n            <td>uint LibWrapper.GetFontData (IntPtr, uint, uint, Byte[], uint)</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<br>\r\nIt is possible to convert this function for Mono compatibility??<br>\r\n<br>\r\nThank you in advance.<br>\r\nBest regard.<br>\r\nVytek<br>\r\n",
    "PostedDate": "2009-04-15T08:42:27.487-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "199141",
    "ThreadId": "53381",
    "Html": "<p>Hi Vytek</p>\r\n<p>These calls are all related to the font support within FO.NET.&nbsp; It is integrated well with Windows - but obviously at the expense of portability!</p>\r\n<p>I don't think it would be easy to remove these calls - you would most likely have to implement additional TTF/OTF parsing code.</p>\r\n<p>Cheers</p>\r\n<p>Mark</p>",
    "PostedDate": "2009-06-08T10:26:31.967-07:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  }
]