[
  {
    "Id": "452572",
    "ThreadId": "215227",
    "Html": "<p>Hi,</p>\r\n<p>I am getting the following error when trying to generate PDF from fo file</p>\r\n<p><br>System.SystemException: At least one of minimum, optimum, or maximum IPD must be specified on table.<br>&nbsp;&nbsp; at Fonet.FonetDriver.FireFonetError(String message)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Table.SetIPD(Boolean bHasProportionalUnits, Int32 maxAllocIPD)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Table.CalcFixedColumnWidths(Int32 maxAllocationWidth)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Table.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Block.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.TableCell.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.TableRow.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.AbstractTableBody.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Table.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Block.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Flow.Layout(Area area, Region region)<br>&nbsp;&nbsp; at Fonet.Fo.Flow.Flow.Layout(Area area)<br>&nbsp;&nbsp; at Fonet.Fo.Pagination.PageSequence.Format(AreaTree areaTree)<br>&nbsp;&nbsp; at Fonet.StreamRenderer.Render(PageSequence pageSequence)<br>&nbsp;&nbsp; at Fonet.Fo.FOTreeBuilder.EndElement()<br>&nbsp;&nbsp; at Fonet.Fo.FOTreeBuilder.Parse(XmlReader reader)</p>",
    "PostedDate": "2010-06-07T10:49:35.613-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "453341",
    "ThreadId": "215227",
    "Html": "<p>Hi,</p>\r\n<p>You'll probably need to post a reduced bit of XSL-FO code that exhibits the problem.</p>\r\n<p>Cheers</p>\r\n<p>Marrow</p>",
    "PostedDate": "2010-06-08T23:49:07.7-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "459458",
    "ThreadId": "215227",
    "Html": "Hi,\r\n\r\nThe number of cells defined in a row may be higher than the number of columns defined for the table.\r\n\r\nCheck the table.\r\n\r\nRegards,\r\nVinoth",
    "PostedDate": "2010-06-24T05:20:31.253-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "629903",
    "ThreadId": "215227",
    "Html": "<p>I recently deigned my Xslt to create an FO report.&nbsp; I used XSelerator to build the Xslt and preview it easily via Fonet.exe command line configuration.&nbsp; The main problem is that everything renders perfectly fine when using Fonet.exe!&nbsp; However, once I integrated Fonet.dll into my .Net (C#) application I keep getting this same error.&nbsp; Why would the FO run perfectly when run via Fonet.exe, but throw this exception when using it within my application (via Fonet.dll)???</p>\r\n<p>Any help is greatly appreciated!</p>\r\n<p>System.SystemException: At least one of minimum, optimum, or maximum IPD must be specified on table.<br />&nbsp;&nbsp; at Fonet.FonetDriver.FireFonetError(String message)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Table.SetIPD(Boolean bHasProportionalUnits, Int32 maxAllocIPD)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Table.CalcFixedColumnWidths(Int32 maxAllocationWidth)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Table.Layout(Area area)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Block.Layout(Area area)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Block.Layout(Area area)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Block.Layout(Area area)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Flow.Layout(Area area, Region region)<br />&nbsp;&nbsp; at Fonet.Fo.Flow.Flow.Layout(Area area)<br />&nbsp;&nbsp; at Fonet.Fo.Pagination.PageSequence.Format(AreaTree areaTree)<br />&nbsp;&nbsp; at Fonet.StreamRenderer.Render(PageSequence pageSequence)<br />&nbsp;&nbsp; at Fonet.Fo.FOTreeBuilder.EndElement()<br />&nbsp;&nbsp; at Fonet.Fo.FOTreeBuilder.Parse(XmlReader reader)</p>\r\n<p>My application code is very simple:</p>\r\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static FileInfo TransformXslFOToPdf(this FileInfo xslFOInputFileInfo, FileInfo pdfOutputFileInfo, XslFOPdfOptions pdfOptions)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XslFONetHelper.ValidateXslFOInputFileHelper(xslFOInputFileInfo);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XslFONetHelper.ValidatePdfOutputFileHelper(pdfOutputFileInfo);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Render the Binary PDF Output<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FonetDriver pdfDriver = XslFONetHelper.GetFoNetDriverHelper(pdfOptions);<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdfDriver.Render(xslFOInputFileInfo.FullName, pdfOutputFileInfo.FullName);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Validate the rendered binary output<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pdfOutputFileInfo == null || !pdfOutputFileInfo.Exists)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new FileNotFoundException(String.Format(\"The rendered PDF File does not exist or cannot be found [{0}]; Xml FO Rendering was not completed successfully.\", pdfOutputFileInfo.FullName));<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Return the rendered Output FileInfo for chaining<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return pdfOutputFileInfo;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>",
    "PostedDate": "2011-06-19T22:37:19.377-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "629912",
    "ThreadId": "215227",
    "Html": "<p>I finally solved my problem.&nbsp; I was getting this error all along but did not realize that it was being output because XSelerator was hiding the console outputs from me.&nbsp; Fonet.exe is handling the errors and allowing them to pass and the rendering completes successfully!&nbsp; The final solution was simple, I have to wire up an event delegate to the OnError event of the Fonet driver.</p>\r\n<p>The following code wires up the event:</p>\r\n<p><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Assign the ErrorHandler if defined</span><br /><span style=\"color: #808080;\"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(errorHandler != null) pdfDriver.OnError += errorHandler;</span></p>\r\n<p><br />And the following code is how I'm now handling these events to allow the rendering to complete just as with Fonet.exe:</p>\r\n<p><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StringBuilder _errorMessage = new StringBuilder();</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void Fonet_OnError(object driver, Fonet.FonetEventArgs e)</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _errorMessage.AppendLine(e.GetMessage());</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>\r\n<p>Finally I simply call my transform with an easy call like:</p>\r\n<p>&nbsp;<span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _errorMessage.Clear();</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdfBinaryFileInfo = xslFOSourceFile.TransformXslFOToPdf(pdfBinaryFileInfo, pdfOptions, this.Fonet_OnError);</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.LoadFile(pdfBinaryFileInfo);</span><br /><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String errorMessage = _errorMessage.ToString();</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!String.IsNullOrEmpty(errorMessage) MessageBox.Show(errorMessage);</span></p>\r\n<p>&nbsp;</p>\r\n<p>Here is an updated version of my extension method below:</p>\r\n<p>&nbsp;<span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public static FileInfo TransformXslFOToPdf(this FileInfo xslFOInputFileInfo, FileInfo pdfOutputFileInfo, XslFOPdfOptions pdfOptions, FonetDriver.FonetEventHandler errorHandler)</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XslFONetHelper.ValidateXslFOInputFileHelper(xslFOInputFileInfo);</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; XslFONetHelper.ValidatePdfOutputFileHelper(pdfOutputFileInfo);</span><br /><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Render the Binary PDF Output</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FonetDriver pdfDriver = XslFONetHelper.GetFoNetDriverHelper(pdfOptions);</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Assign the ErrorHandler if defined</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(errorHandler != null) pdfDriver.OnError += errorHandler;</span><br /><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Render the Pdf Output</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdfDriver.Render(xslFOInputFileInfo.FullName, pdfOutputFileInfo.FullName);</span><br /><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Validate the rendered binary output</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pdfOutputFileInfo.Refresh();</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pdfOutputFileInfo == null || !pdfOutputFileInfo.Exists)</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new FileNotFoundException(String.Format(\"The rendered PDF File does not exist or cannot be found [{0}]; Xml FO Rendering was not completed successfully.\", pdfOutputFileInfo.FullName));</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span><br /><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Return the rendered Output FileInfo for chaining</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return pdfOutputFileInfo;</span><br /><span style=\"color: #808080;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>",
    "PostedDate": "2011-06-19T23:21:53.097-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]